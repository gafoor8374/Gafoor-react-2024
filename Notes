Episode 1:

index.html

 <!-- Using javascript -->

    <!-- <script>
        const heading = document.createElement("h1");
        heading.innerHTML = "Hello World! welcome to the javascript.";
        const root = document.getElementById("root");

        root.appendChild(heading);
    </script> -->

    <!-- Using react scripts -->
    <!-- <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script> -->

Episode 2:

commands

- npm init
- npm i -D parcel
- npm i react
- npm i reactdom
- npx parcel index.html - start server add script in package.json
- npx parcel build index.html - production build in dist floder add script in package.json
- npx parcel build index.html then we remove the "main: app.js"in package.json it will be relocate the index.html start point

/\*\*

- <div id : "Parent">
- <div id: "child">
-       <h1>i'm h1 tag</h1>
-      <h2> i'm h2 tag </h2>
- </div>
- <div id: "child">
-       <h1>i'm h1 tag</h1>
-      <h2> i'm h2 tag </h2>
- </div>
- </div>
  */

// React.createElemte is a object => ReactDOM is render the object converts to html in to the browser

const parent = React.createElement("div", { id: "parent" },
[React.createElement("div", { id: "child" },
[React.createElement("h1", {}, "Gafoor Shaik"), React.createElement("h2", {}, "Shaik Gafoor")]),
React.createElement("div", { id: "child2" },
[React.createElement("h1", {}, "I am h1 tag"), React.createElement("h2", {}, "I am h2 tag")])]);

// const heading = React.createElement("h1", { id: "heading" }, "Hello world welcome to React"); // React.creteElement is object

console.log(parent);

const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(parent);

Episode 3:

- After confirgured npx parcel index.html in package.json then run command will be change npx parcel index.html to "npm run start" or "npm start".

- React element =>
- It is JS object => render then it will be convert into HTMLElemnt.
- const heading = React.createElement{"h1",{attiributes},"Namsthe React"}
- console.log(heading);
- const root =ReactDOM.createRoot(document.getElementBYId("root"));
- root.render(heading); => converts to HTMLelement push the browser rendering the root div replace the root div.

- JSX: => is not HTML in JS, it is HTML like or XML like syntax
  -- JSX => React.createElement => ReactElement JS object => HTMLElement(render) --
  1.JSX make life easy devleopers
  2.JSX and React is different.
  3.It is understand for ECMA script ES6
  4.transplied before it reches the JS => PARCEL => Babel

- const jsxheading = <h1 id="heading">Welcome to JSX using react</h1>;
- console.log(jsxheading);

- const root = ReactDOM.createRoot(document.getElementById("root"));

- root.render(jsxheading)

- React Component two ways
- 1. class Based Component - OLD
- 2. Functional Based Component- NEW

Functional Based Component:-

- it is normal JS, it's return some JSX code.
  EX:- const headComponent = () => {
  return <h1>welcome to functional react componennt </h1>;
  }

- const fn = () => true;
- cons fn2 = () => {
  return true;
  }

//React Element
const heading = (
<h1 className="head">
Welcome to JSX using react
</h1>
);

// Functional component

- const HeadingComponent = () => {
  return <h1 className="heading">Welcome to the Functional Component in to React</h1>
  }

functional component render like this
EX: root.render(<HeadingComponent />)

// Component Composition => put in one component into another component
EX:-
const Title = () => (
<h1 className="head">
Welcome to JSX using react
</h1>
);

const HeadingComponent = () => {
return (
<div id="container">
<Title /> or <Title></Title> or {Title()}
<h1 className="heading">
Welcome to the Functional Component in to React
</h1>
</div>
);
};

- Any JS combine to gether in JSX code in {}, react element
  EX:-
  //React Element
  const heading = (
  <h1 className="head">
  Welcome to JSX using react
  </h1>
  );

const number = 10;

const HeadingComponent = () => {
return (
<div id="container">
{title}
{number} // JS code
<h2>{number}</h2>
<h1 className="heading">
Welcome to the Functional Component in to React
</h1>
</div>
);
};

element under another element:
EX:-
const ele = <span>welcome element</span>

const heading = (
<h1 className="head">
{ele}
Welcome to JSX using react
</h1>
);

-->Episode 4-->
/\*\*
const Title = ()=> (
<h1 className="head">
Welcome to JSX using react
</h1>
);

const HeadingComponent = () => {
return (
<div id="container">
{Title()}
<h1 className="heading">
Welcome to the Functional Component in to React
</h1>
</div>
);
};
\*/

-- Food ordering app
planing
/\*\*

- Header
- - Logo
- - Nav Items
- Body
- - search
- - RestruantContainer
- - RestaurantCard
- footer
- - CopyRight
- - Links
- - Address
- - Contact
    \*/

--props--
passing a arugument the function it's props.

EX:
-//console.log(props);
//const {resName, cuisine} = props;

- const restarunatCard = (props) or destructing ({resName,cuisine}) =>{
  <h1>{props.resName}</h1>
  }

<RestaurantCard resName ="Meghana Food" cuisine="Briyani,South Indian, Asian"/>
<RestaurantCard resName ="KFC" cuisine="Bruger"/>

--key--
newly added in list first place we should use key

react not accepted using key as index

{/_ <RestaurantCard resData={resList[0]}/>
<RestaurantCard resData={resList[1]}/>
<RestaurantCard resData={resList[2]}/>
<RestaurantCard resData={resList[3]}/> _/}

{/* {looping the restraunt using map function using key} */}
{resList.map((restaruant) => (
<RestaurantCard key={restaruant.info.id}resData={restaruant} />
))}


-- Episode:5 --
- create a 'src' folder in root level 
- Make seperate component for ever component in src folder to avoid to much nesting
- creating a components capital latter first.
- seperate the components then first 'export' after 'import' that component
- EX: export default Header:
      import Header from 'location of the file'

- Never place into the hard coded data into the componenet files
- hard coded data keep another folder like 
'utils etc'
EX:- hard code data means
    1. reslist, logo url,

EXPORT and IMPORT is two types
 1. Deafult export/import 
 EX: export default componet;
 EX: import component from "path";
 2. Named export/import:
 - In single file multiple then we use named export 
 EX: export const header; 
 EX: import the named files like EX: import {header,url} from "./loaction file"

 # React Hooks
- Hooks is normal JS utility function
 # important Hooks
  1. useState() - state variable in react
  2. useEffect()

# usseState()
 - const [list, setList] = useState();

 - useState is 

 - when state variable update UI is re-render automatically

 # Reconciliation Algorithm(React fiber)
 - Virutal Dom is a representation of actual DOM